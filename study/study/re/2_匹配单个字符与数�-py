import re
#匹配单个字符和数字
'''
.                匹配除换行符以外的任意字符
[0123456789]     []是字符集合，表示匹配方括号中所包含的任意一个字符
[hello]          匹配'h','e','l','l','o'中任意一个字符
[a-z]            匹配任意小写字母
[A-Z]            匹配任意大写字母
[0-9]            匹配任意数字，类似[0123456789]
[0-9a-zA-Z]      匹配任意的数字和字母
[0-9a-zA-Z_]     匹配任意的数字、字母和下划线
[^hello]         匹配除了hello这几个字母以外的所有字符，中括号里的^称为脱字符，表示不匹配集合中的字符
[^0-9]           匹配所有的非数字字符
\d               匹配数字，效果同[0-9]
\D               匹配非数字字符，效果同[^0-9]
\w               匹配数字，字母和下划线,效果同[0-9a-zA-Z_]
\W               匹配非数字，字母和下划线，效果同[^0-9a-zA-Z_]
\s               匹配任意的空白符(空格，换行，回车，换页，制表)，效果同[ \f\n\r\t]
\S               匹配任意的非空白符，效果同[^ \f\n\r\t]
'''
print(re.findall('\d', "hello1234world"))
print(re.findall('[a-z]', "1234hello123"))
print(re.findall('\s', "hello   world tarena"))
print(re.findall('\S', "hello   world tarena"))

#边界字符,锚字符
'''
^     行首匹配，和在[]里的^不是一个意思
$     行尾匹配

\A    匹配字符串开始，它和^的区别是,\A只匹配整个字符串的开头，即使在re.M模式下也不会匹配它行的行首
\Z    匹配字符串结束，它和$的区别是,\Z只匹配整个字符串的结束，即使在re.M模式下也不会匹配它行的行尾


\b    匹配一个单词的边界，也就是单词和空格间的位置
      'er\b'可以匹配never,不能匹配nerve
\B    匹配非单词边界

'''
print(re.search('^hello', "hello,world, tarena"))
print(re.search('hello$', "hello,world,hello,tarena"))
print(re.search('tarena$', "hello,world,tarena"))
print(re.search("^hello", "hello,world\nhello,tarena",re.M))
print(re.search("\Ahello", "hello,world\nhello,tarena",re.M))
print(re.search("world$", "hello,world\nhello,tarena",re.M))
print(re.search("world\Z", "hello,world\nhello,tarena",re.M))
print(re.search("tarena\Z", "hello,world\nhello,tarena",re.M))
print(re.search(r'er\b', "nerver"))
print(re.search(r've\b', "nerver"))
print(re.search(r've\B', "nerver"))

#匹配多个字符串
'''
说明：下方的x、y、z均为假设的普通字符,n、m（非负整数），不是正则表达式的元字符
(xyz)    匹配小括号内的xyz(作为一个整体去匹配)
x?       匹配0个或者1个x
x*       匹配0个或者任意多个x（.* 表示匹配0个或者任意多个字符(换行符除外)）
x+       匹配至少一个x
x{n}     匹配确定的n个x（n是一个非负整数）
x{n,}    匹配至少n个x
x{n,m}   匹配至少n个最多m个x。注意：n <= m
x|y      |表示或，匹配的是x或y
*?   +?  最小匹配，通常都是尽可能多的匹配，可以使用这种解决贪婪匹配
'''
print(re.findall('a?', "aabc"))
print(re.findall('a*', "aabc"))
print(re.findall('a+', "aaabc"))
print(re.findall('a{2}', "aaabc"))
print(re.findall('a{2,}', "aaabc"))
print(re.findall('a{2,4}', "aaaaabac"))
print(re.findall('(h|H)ello', "hello-Hello"))

#需求，提取hello……zhangsan,
str = "hello 1234 zhangsan!hello 44444 zhangsan!"
print(re.findall("hello.*?zhangsan", str))
print(re.findall("hello.+?zhangsan", str))